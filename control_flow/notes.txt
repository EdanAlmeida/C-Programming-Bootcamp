@IF ELSE STATEMENT:
    # if (condition) instruction;
        - if condition != 0 -> instruction executed.
        - if condition = 0 -> instruction skipped.
        - condition can be a variable, constant, expression, function call.

#include <stdio.h>

int main(){
    int a = 9;
    int b = 3;
    
    if (a > b){
        printf("Condition is true!");
        print("\n");
    }
    return 0;
}



@SWITCH STATEMENT:
    # switch (expression){
        case constant_1:
            /*code case 1*/
            break;

        case constant_N:
            /*code case N*/
            break;
        
        default:
            /*default code*/
            break;
    }


#include <stdio.h>
#include <stdlib.h>

int main(){
    char operator;
    double operand_a, operand_b, result;

    printf("Enter the operator: ");
    scanf("%c", &operator);

    printf("Enter the first operand: ");
    scanf("%lf", &operand_a);

    printf("Enter the second operand: ");
    scanf("%lf", &operand_b);
    printf("\n");

    int error = 0;

    switch (operator)
    {
        case '+':
            result = operand_a + operand_b;
            break;
        case '-':
            result = operand_a - operand_b;
            break;
        case '*':
            result = operand_a * operand_b;
            break;
        case '/':
            result = operand_a / operand_b;
            break;
        default:
            error = 1;
            break;
    }

    if (error)
    {
        printf("Error: unknown operator!\n");
    }
    else
    {
        printf("%.1f %c %.1f = %f\n", operand_a, operator, operand_b, result);
    }

    printf("\n\n=== Monster Mash ===\n\n");
    return EXIT_SUCCESS;
}





@WHILE LOOP:
    # while (test){body}

#include <stdio.h>
#include <stdlib.h>

int main(){
    int iterations = 5;
    
    while (iterations > 0){
        printf("i: %d\n", iterations);
        iterations --;
    }
    
    return 0;
}


    #do {body} while (test)

#include <stdio.h>
#include <stdlib.h>

int main(){
    int iterations = 0;
    
    do {
        printf("i: %d", iterations--);
    }while (iterations > 0); //output == 0
    
    return 0;
}




@FOR LOOP:
    # for (initialization; test; update) {body}
        1 -> Initilization executed once;
        2 -> Teste condition:
            - If test <> 0 -> body executed;
            - If test = 0 -> loop terminated;
        3 -> If loop not terminated -> update.

#include <stdio.h>

int main(){

    for (int i = 0; i < 5; i++){ //local variable.
        printf("i = %d\n", i);
    }

    return 0;
}


@BREAK AND CONTINUE:
    #Break statement:
        - Ends the loop immediately;
        - Unconditional jump.


#include <stdio.h>
#include <stdlib.h>

int main(){

    int input, accumulator = 0;
    const int ITERATIONS = 10;
    
    for (int i = 0; i < ITERATIONS; i++)
    {
        printf("Enter an integer (-1 to exit): ");
        scanf("%d", & input);

        if (input == -1){
            break;
        }

        accumulator += input;
    }
    
    printf("\nAccumulator: %d\n", accumulator);

    return EXIT_SUCCESS;
}

    #Continue statement:
        - Jump to the end of the loop body;
        - Unconditional jump.


#include <stdio.h>
#include <stdlib.h>

int main(){

    int input, accumulator = 0;
    const int ITERATIONS = 5;
    
    for (int i = 0; i < ITERATIONS; i++)
    {
        printf("Enter an integer (> 0): ");
        scanf("%d", & input);

        if (input < 0){
            continue;
        }

        accumulator += input;
    }
    
    printf("\nAccumulator: %d\n", accumulator);

    return EXIT_SUCCESS;
}




@GOTO
    # goto identifier;
        - immediately jump to the identifier label;
        - Unconditional jump;
    
# When to use 'goto':
    *Case 1 : Break out of nest loops;

for (int i = 0; i < MAX_I; i++){
    for (int j = 0; j < MAX_J; j++){
        for (int k = 0; k < MAX_K; k++){
            /*inner loop code*/
            if (break_condition){
                goto final;
            }
            /*inner loop code*/
        }
    }
}

final:
    /*resume here*/



    *Case 2 : Error handling, cleanup resources at the end of a procedure;
status = do_something();
if (status == ERROR) {
    goto cleanup;
}

/*do_something succeded*/
/*procedure code*/

cleanup: 
/*cleanup code*/

